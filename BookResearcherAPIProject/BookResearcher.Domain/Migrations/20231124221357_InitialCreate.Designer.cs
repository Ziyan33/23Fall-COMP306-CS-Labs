// <auto-generated />
using BookResearcher.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookResearcher.Domain.Migrations
{
    [DbContext(typeof(BookResearcherContext))]
    [Migration("20231124221357_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookResearcher.Domain.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.BookAuthors", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("BookID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.BookAvailability", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("LibraryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookID", "LibraryID");

                    b.HasIndex("LibraryID");

                    b.ToTable("BookAvailability");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.LibraryBranch", b =>
                {
                    b.Property<int>("LibraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryID");

                    b.ToTable("LibraryBranches");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.BookAuthors", b =>
                {
                    b.HasOne("BookResearcher.Domain.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookResearcher.Domain.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.BookAvailability", b =>
                {
                    b.HasOne("BookResearcher.Domain.Models.Book", "Book")
                        .WithMany("BookAvailability")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookResearcher.Domain.Models.LibraryBranch", "LibraryBranch")
                        .WithMany("BookAvailability")
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookAvailability");
                });

            modelBuilder.Entity("BookResearcher.Domain.Models.LibraryBranch", b =>
                {
                    b.Navigation("BookAvailability");
                });
#pragma warning restore 612, 618
        }
    }
}
